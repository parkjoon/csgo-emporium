(function(e) {
    var t = {},
        o = {},
        n = function(t) {
            return "string" == e.type(t) && (t = {
                message: t
            }), arguments[1] && (t = e.extend(t, "string" == e.type(arguments[1]) ? {
                status: arguments[1]
            } : arguments[1])), new i(t).show()
        },
        a = function(e, t) {
            if (e)
                for (var n in o) e === o[n].group && o[n].close(t);
            else
                for (var n in o) o[n].close(t)
        },
        i = function(n) {
            this.options = e.extend({}, i.defaults, n), this.uuid = "ID" + (new Date).getTime() + "RAND" + Math.ceil(1e5 * Math.random()), this.element = e(['<div class="uk-notify-message alert-dismissable">', '<a class="close">&times;</a>', "<div>" + this.options.message + "</div>", "</div>"].join("")).data("notifyMessage", this), this.options.status && (this.element.addClass("alert alert-" + this.options.status), this.currentstatus = this.options.status), this.group = this.options.group, o[this.uuid] = this, t[this.options.pos] || (t[this.options.pos] = e('<div class="uk-notify uk-notify-' + this.options.pos + '"></div>').appendTo("body").on("click", ".uk-notify-message", function() {
                e(this).data("notifyMessage").close()
            }))
        };
    return e.extend(i.prototype, {
        uuid: !1,
        element: !1,
        timout: !1,
        currentstatus: "",
        group: !1,
        show: function() {
            if (!this.element.is(":visible")) {
                var e = this;
                t[this.options.pos].show().prepend(this.element);
                var o = parseInt(this.element.css("margin-bottom"), 10);
                return this.element.css({
                    opacity: 0,
                    "margin-top": -1 * this.element.outerHeight(),
                    "margin-bottom": 0
                }).animate({
                    opacity: 1,
                    "margin-top": 0,
                    "margin-bottom": o
                }, function() {
                    if (e.options.timeout) {
                        var t = function() {
                            e.close()
                        };
                        e.timeout = setTimeout(t, e.options.timeout), e.element.hover(function() {
                            clearTimeout(e.timeout)
                        }, function() {
                            e.timeout = setTimeout(t, e.options.timeout)
                        })
                    }
                }), this
            }
        },
        close: function(e) {
            var n = this,
                a = function() {
                    n.element.remove(), t[n.options.pos].children().length || t[n.options.pos].hide(), delete o[n.uuid]
                };
            this.timeout && clearTimeout(this.timeout), e ? a() : this.element.animate({
                opacity: 0,
                "margin-top": -1 * this.element.outerHeight(),
                "margin-bottom": 0
            }, function() {
                a()
            })
        },
        content: function(e) {
            var t = this.element.find(">div");
            return e ? (t.html(e), this) : t.html()
        },
        status: function(e) {
            return e ? (this.element.removeClass("alert alert-" + this.currentstatus).addClass("alert alert-" + e), this.currentstatus = e, this) : this.currentstatus
        }
    }), i.defaults = {
        message: "",
        status: "normal",
        timeout: 5e3,
        group: null,
        pos: "top-center"
    }, e.notify = n, e.notify.message = i, e.notify.closeAll = a, n
})(jQuery, window, document)
